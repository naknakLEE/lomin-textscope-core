version: '2.3'

services:
  # management1:
  #   image: mysql/mysql-cluster
  #   container_name: mysql-management
  #   volumes:
  #     - ./mysql.conf/my.cnf:/etc/my.cnf
  #     - ./mysql.conf/mysql-cluster.cnf:/etc/mysql-cluster.cnf
  #   command: ndb_mgmd
  #   networks:
  #     our_net:
  #         ipv4_address: ${MYSQL_MANAGEMENT_IP_ADDR}
    
  # ndb1:
  #   image: mysql/mysql-cluster
  #   container_name: mysql-ndb1
  #   volumes:
  #     - ./mysql.conf/my.cnf:/etc/my.cnf
  #     - ./mysql.conf/mysql-cluster.cnf:/etc/mysql-cluster.cnf
  #   command: ndbd
  #   depends_on: 
  #     - management1
  #   networks:
  #     our_net:
  #         ipv4_address: ${MYSQL_NDB1_IP_ADDR}

  # ndb2:
  #   image: mysql/mysql-cluster
  #   container_name: mysql-ndb2
  #   volumes:
  #     - ./mysql.conf/my.cnf:/etc/my.cnf
  #     - ./mysql.conf/mysql-cluster.cnf:/etc/mysql-cluster.cnf
  #   command: ndbd
  #   depends_on:
  #     - management1
  #   networks:
  #     our_net:
  #         ipv4_address: ${MYSQL_NDB2_IP_ADDR}
    
  # mysql1:
  #   image: mysql/mysql-cluster
  #   container_name: mysql
  #   ports:
  #     - "3306:3306"
  #   volumes:
  #     - ./mysql.conf/my.cnf:/etc/my.cnf
  #     - ./mysql.conf/mysql-cluster.cnf:/etc/mysql-cluster.conf
  #   environment:
  #     MYSQL_ROOT_PASSWORD: ${MYSQL_PASSWORD}
  #     MYSQL_DATABASE: ${CUSTOMER}
  #     MYSQL_USER: ${CUSTOMER}
  #     MYSQL_PASSWORD: ${MYSQL_PASSWORD}
  #     MYSQL_ROOT_HOST: '%'
  #     # - MYSQL_ROOT_PASSWORD=${MYSQL_PASSWORD}
  #     # - TZ=Asia/Seoul
  #   command: mysqld
  #   depends_on:
  #     - management1
  #     - ndb1
  #     - ndb2
  #   networks:
  #     our_net:
  #         ipv4_address: ${MYSQL_IP_ADDR}


  mysql1:
    # image: docker.lomin.ai/ts-mysql:${TEXTSCOPE_VERSION}
    image: mysql:8.0.25
    container_name: mysql
    volumes:
      - mysqldata:/var/lib/mysql
    restart: always
    networks:
      our_net:
          ipv4_address: ${MYSQL_IP_ADDR}

  
  serving:
    image: docker.lomin.ai/ts-gpu-serving:${TEXTSCOPE_VERSION}
    container_name: serving
    environment:
      - CUSTOMER=${CUSTOMER}
    volumes:
      - ${BASE_LOG_PATH}:/workspace/logs
    restart: unless-stopped
    networks:
      our_net:
        ipv4_address: ${SERVING_IP_ADDR}

  serving_replica:
    image: docker.lomin.ai/ts-gpu-serving:${TEXTSCOPE_VERSION}
    container_name: serving_replica
    environment:
      - CUSTOMER=${CUSTOMER}
    restart: unless-stopped
    networks:
      our_net:
        ipv4_address: ${SERVING_REPLICA_IP_ADDR}

  web:
    image: docker.lomin.ai/ts-web:${TEXTSCOPE_VERSION}
    container_name: web
    environment:
      - CUSTOMER=${CUSTOMER}
    volumes:
      - ${BASE_LOG_PATH}:/workspace/logs
    restart: unless-stopped
    depends_on: 
      - mysql1
    networks:
      our_net:
          ipv4_address: ${WEB_IP_ADDR}

  pp:
    image: docker.lomin.ai/ts-pp:${TEXTSCOPE_VERSION}
    container_name: pp
    environment:
      - CUSTOMER=${CUSTOMER}
    volumes:
      - ${BASE_LOG_PATH}:/workspace/logs
    restart: unless-stopped
    networks:
      our_net:
          ipv4_address: ${PP_IP_ADDR}

  wrapper:
    image: docker.lomin.ai/ts-wrapper:${TEXTSCOPE_VERSION}
    container_name: wrapper
    environment:
      - CUSTOMER=${CUSTOMER}
    volumes:
      - ${BASE_LOG_PATH}:/workspace/logs
    restart: unless-stopped
    depends_on: 
      - mysql1
    networks:
      our_net:
          ipv4_address: ${WRAPPER_IP_ADDR}
    
  multiple_gpu_load_balancing:
    # image: docker.lomin.ai/ts-multiple-gpu-load-balancingy:${TEXTSCOPE_VERSION}
    image: nginx:stable
    container_name: multiple_gpu_load_balancing
    restart: unless-stopped
    volumes:
      - ./proxy/multiple_gpu_load_balancing.conf:/etc/nginx/nginx.conf
    networks:
      our_net:
        ipv4_address: ${MULTIPLE_GPU_LOAD_BALANCING_NGINX_IP_ADDR}
      
  nginx:
    # image: nginx:stable
    image: docker.lomin.ai/ts-nginx:${TEXTSCOPE_VERSION}
    build:
      context: ./
      dockerfile: docker/production/Dockerfile.nginx
      args:
        CONF_NAME: nginx
    container_name: nginx
    volumes:
      - ./proxy/nginx.conf:/etc/nginx/nginx.conf
      - ${BASE_LOG_PATH}/nginx:/var/log/nginx
    restart: unless-stopped
    networks:
      our_net:
        ipv4_address: ${NGINX_IP_ADDR}

    
  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:0.9.0
    container_name: nginx_exporter
    networks:
      our_net:
        ipv4_address: ${NGINX_EXPORTER_IP_ADDR}

  gpu_telemetry:
    image: nvcr.io/nvidia/k8s/dcgm-exporter:2.0.13-2.1.2-ubuntu18.04
    container_name: gpu_telemetry
    runtime: nvidia
    networks:
      our_net:
        ipv4_address: ${DCGM_EXPORTER_IP_ADDR}
    
  hardware_telemetry:
    image: prom/node-exporter
    container_name: hardware_telemetry
    networks:
      our_net:
        ipv4_address: ${NODE_EXPORTER_IP_ADDR}
    
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: always
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./.env:/etc/prometheus/.env
      - prometheus_data:/prometheus
    networks:
      our_net:
          ipv4_address: ${PROMETHEUS_IP_ADDR}
    
  grafana:
    image: grafana/grafana
    container_name: grafana
    volumes: 
      - grafana_data:/var/lib/grafana
    depends_on: 
      - prometheus
    restart: always
    networks:
      our_net:
          ipv4_address: ${GRAFANA_IP_ADDR}

  mysql-exporter:
    image: prom/mysqld-exporter
    container_name: mysqld-exporter
    restart: always
    networks:
      our_net:
        ipv4_address: ${MYSQL_EXPORTER_IP_ADDR}

volumes: 
  prometheus_data: {}
  grafana_data: {}
  pgdata: {}
  mysqldata: {}

networks:
  our_net:
    ipam:
      config:
        - subnet: 182.20.0.0/24
