version: '2.3'

services:
  mysql1:
    image: mysql:8.0.25
    container_name: mysql
    volumes:
      - ${DATA_PATH}/mysql_data:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_PASSWORD}
      - TZ=Asia/Seoul
    restart: always
    networks:
      our_net:
          ipv4_address: ${MYSQL_IP_ADDR}

  
  serving:
    image: docker.lomin.ai/ts-gpu-serving:${TEXTSCOPE_SERVING_VERSION}
    container_name: serving
    environment:
      - CUSTOMER=${CUSTOMER}
    volumes:
      - ${MOUNT_LOG_PATH}:/workspace/logs
    restart: unless-stopped
    extra_hosts:
      - ${LDAP_HOST}
    cap_add:
      - SYS_PTRACE
    networks:
      our_net:
        ipv4_address: ${SERVING_IP_ADDR}

  serving_replica:
    image: docker.lomin.ai/ts-gpu-serving:${TEXTSCOPE_SERVING_VERSION}
    container_name: serving_replica
    environment:
      - CUSTOMER=${CUSTOMER}
    restart: unless-stopped
    cap_add:
      - SYS_PTRACE
    networks:
      our_net:
        ipv4_address: ${SERVING_REPLICA_IP_ADDR}

  web:
    image: docker.lomin.ai/ts-web:${TEXTSCOPE_CORE_VERSION}
    container_name: web
    environment:
      - CUSTOMER=${CUSTOMER}
    volumes:
      - ${MOUNT_LOG_PATH}:/workspace/logs
    restart: unless-stopped
    depends_on: 
      - mysql1
    cap_add:
      - SYS_PTRACE
    networks:
      our_net:
          ipv4_address: ${WEB_IP_ADDR}

  pp:
    image: docker.lomin.ai/ts-pp:${TEXTSCOPE_PP_VERSION}
    container_name: pp
    environment:
      - CUSTOMER=${CUSTOMER}
    volumes:
      - ${MOUNT_LOG_PATH}:/workspace/logs
    restart: unless-stopped
    cap_add:
      - SYS_PTRACE
    networks:
      our_net:
          ipv4_address: ${PP_IP_ADDR}

  wrapper:
    image: docker.lomin.ai/ts-wrapper:${TEXTSCOPE_WRAPPER_VERSION}
    container_name: wrapper
    environment:
      - CUSTOMER=${CUSTOMER}
    volumes:
      - ${MOUNT_LOG_PATH}:/workspace/logs
    restart: unless-stopped
    extra_hosts:
      - ${DATABASE_HOST}
    depends_on: 
      - mysql1
    networks:
      our_net:
          ipv4_address: ${WRAPPER_IP_ADDR}
    
  multiple_gpu_load_balancing:
    image: nginx:1.21.1
    container_name: multiple_gpu_load_balancing
    restart: unless-stopped
    volumes:
      - ./proxy/multiple_gpu_load_balancing.conf:/etc/nginx/nginx.conf
    networks:
      our_net:
        ipv4_address: ${MULTIPLE_GPU_LOAD_BALANCING_NGINX_IP_ADDR}
   
  nginx:
    image: docker.lomin.ai/ts-nginx:${TEXTSCOPE_NGINX_VERSION}
    build:
      context: ./
      dockerfile: docker/production/Dockerfile.nginx
      args:
        CONF_NAME: nginx
        MAINTAINER: ${MAINTAINER}
    container_name: nginx
    volumes:
      - ./proxy/nginx.conf:/etc/nginx/nginx.conf
      - ${MOUNT_LOG_PATH}/nginx:/var/log/nginx
    restart: unless-stopped
    ports:
      - 18090:80
    networks:
      our_net:
        ipv4_address: ${NGINX_IP_ADDR}

  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:0.9.0
    container_name: nginx_exporter
    command:
      - -nginx.scrape-uri=http://${NGINX_IP_ADDR}:8080/metrics
    networks:
      our_net:
        ipv4_address: ${NGINX_EXPORTER_IP_ADDR}

  gpu_telemetry:
    image: nvcr.io/nvidia/k8s/dcgm-exporter:2.0.13-2.1.2-ubuntu18.04
    container_name: gpu_telemetry
    runtime: nvidia
    networks:
      our_net:
        ipv4_address: ${DCGM_EXPORTER_IP_ADDR}
    
  hardware_telemetry:
    image: prom/node-exporter:v1.2.2
    container_name: hardware_telemetry
    networks:
      our_net:
        ipv4_address: ${NODE_EXPORTER_IP_ADDR}
    entrypoint: /bin/node_exporter
    
  prometheus:
    image: prom/prometheus:v2.30.0
    container_name: prometheus
    restart: always
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./.env:/etc/prometheus/.env
      - ${DATA_PATH}/prometheus_data:/prometheus
    entrypoint: /bin/prometheus
    command: 
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --web.console.libraries=/usr/share/prometheus/console_libraries
      - --web.console.templates=/usr/share/prometheus/consoles
    networks:
      our_net:
          ipv4_address: ${PROMETHEUS_IP_ADDR}

  mysql-exporter:
    image: prom/mysqld-exporter:v0.13.0
    container_name: mysqld-exporter
    restart: always
    entrypoint: /bin/mysqld_exporter
    environment:
      - DATA_SOURCE_NAME=${MYSQL_USER}:${MYSQL_PASSWORD}@(${MYSQL_IP_ADDR}:3306)/
    cap_add:
      - SYS_NICE
    networks:
      our_net:
        ipv4_address: ${MYSQL_EXPORTER_IP_ADDR}

  grafana:
    image: grafana/grafana:8.1.4-ubuntu
    container_name: grafana
    volumes: 
      - ./ldap/grafana.ini:/etc/grafana/grafana.ini
      - ./ldap/ldap.toml:/etc/grafana/ldap.toml
      - ${DATA_PATH}/grafana_data:/var/lib/grafana
    depends_on: 
      - prometheus
    restart: always
    networks:
      our_net:
          ipv4_address: ${GRAFANA_IP_ADDR}

  openldap:
    image: docker.lomin.ai/ts-openldap:${TEXTSCOPE_VERSION}
    container_name: ldap
    build: ./openldap
    environment:
      SLAPD_PASSWORD: lomin
      SLAPD_DOMAIN: lomin.ai
      SLAPD_ADDITIONAL_MODULES: memberof
    ports:
      - "389:389"
    networks:
      our_net:
          ipv4_address: ${OPENLDAP_IP_ADDR}

networks:
  our_net:
    ipam:
      config:
        - subnet: 10.254.0.0/16
