version: "2.3"

services:
  minio:
    container_name: minio
    image: quay.io/minio/minio:RELEASE.2022-02-24T22-12-01Z
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    ports:
      - ${MINIO_PORT}:9000
      - 9001:9001
    networks:
      - our_net
    volumes:
      - minio_data:/data
    command: minio server /data --console-address "${MINIO_IP_ADDR}:9001"
  postgres:
    container_name: postgres
    image: postgres:14 #TODO make Dockerfile
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DATABASE}
    ports:
      - "55432:5432"
    networks:
      - our_net
  elasticsearch:
    image: docker.lomin.ai/ts-elasticsearch:${ELASTICSEARCH_IMAGE_VERSION:-0.0.0}
    build:
      context: elasticsearch
      dockerfile: Dockerfile.elasticsearch
    container_name: elasticsearch
    restart: on-failure
    volumes:
      - esdata:/usr/share/elasticsearch/data:rw
    ports:
      - 9200:9200
      - 9300:9300
    environment:
      - cluster.name=ts-cluster
      - discovery.type=single-node
      - http.host=0.0.0.0
      - transport.host=127.0.0.1
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    networks:
      - our_net

  kibana:
    image: docker.elastic.co/kibana/kibana:7.16.2
    container_name: kibana
    ports:
      - 5601:5601
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - our_net

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4 #TODO make Dockerfile
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
      TZ: Asia/Seoul
    depends_on:
      - postgres
    ports:
      - "5050:80"
    networks:
      - our_net

  serving:
    image: docker.lomin.ai/ts-gpu-serving:${TEXTSCOPE_SERVING_VERSION}
    container_name: serving
    environment:
      - CUSTOMER=${CUSTOMER}
      - TZ=Asia/Seoul
    volumes:
      - ${MOUNT_LOG_PATH}:/workspace/logs
    restart: unless-stopped
    extra_hosts:
      - ${LDAP_HOST}
    cap_add:
      - SYS_PTRACE
    runtime: nvidia
    networks:
      - our_net

  web:
    image: docker.lomin.ai/ts-web:${TEXTSCOPE_CORE_VERSION}
    container_name: web
    environment:
      - CUSTOMER=${CUSTOMER}
      - TZ=Asia/Seoul
    volumes:
      - ${MOUNT_LOG_PATH}:/workspace/logs
    restart: unless-stopped
    depends_on:
      - postgres
      - minio
    cap_add:
      - SYS_PTRACE
    networks:
      - our_net

  pp:
    image: docker.lomin.ai/ts-pp:${TEXTSCOPE_PP_VERSION}
    container_name: pp
    environment:
      - CUSTOMER=${CUSTOMER}
      - TZ=Asia/Seoul
    volumes:
      - ${MOUNT_LOG_PATH}:/workspace/logs
    restart: unless-stopped
    cap_add:
      - SYS_PTRACE
    networks:
      - our_net

  wrapper:
    image: docker.lomin.ai/ts-wrapper:${TEXTSCOPE_WRAPPER_VERSION}
    container_name: wrapper
    environment:
      - CUSTOMER=${CUSTOMER}
      - TZ=Asia/Seoul
    volumes:
      - ${MOUNT_LOG_PATH}:/workspace/logs
      - /home/mir/Downloads/hklife:/DATA_SHARE/hklife
      - /home/mir/Downloads/hg_life/life_insurance/life_insurance_test_set:/DATA_SHARE/life_insurance_test_set
    restart: unless-stopped
    extra_hosts:
      - ${DATABASE_HOST}
    depends_on:
      - postgres
      - minio
    networks:
      - our_net

  # nginx:
  #   image: docker.lomin.ai/ts-nginx:${TEXTSCOPE_NGINX_VERSION}
  #   build:
  #     context: ./
  #     dockerfile: docker/production/Dockerfile.nginx
  #     args:
  #       CONF_NAME: nginx
  #       MAINTAINER: ${MAINTAINER}
  #   container_name: nginx
  #   volumes:
  #     - ./proxy/nginx.conf:/etc/nginx/nginx.conf
  #     - ${MOUNT_LOG_PATH}/nginx:/var/log/nginx
  #   restart: unless-stopped
  #   networks:
  #     - our_net

  # nginx-exporter:
  #   image: nginx/nginx-prometheus-exporter:0.9.0
  #   container_name: nginx_exporter
  #   command:
  #     - -nginx.scrape-uri=http://${NGINX_IP_ADDR}:8080/metrics
  #   networks:
  #     - our_net

  gpu_telemetry:
    image: nvcr.io/nvidia/k8s/dcgm-exporter:2.0.13-2.1.2-ubuntu18.04
    container_name: gpu_telemetry
    runtime: nvidia
    networks:
      - our_net

  hardware_telemetry:
    image: prom/node-exporter:v1.2.2
    container_name: hardware_telemetry
    networks:
      - our_net
    entrypoint: /bin/node_exporter

  prometheus:
    image: prom/prometheus:v2.30.0
    container_name: prometheus
    restart: always
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./.env:/etc/prometheus/.env
      - prometheus_data:/prometheus
    entrypoint: /bin/prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --web.console.libraries=/usr/share/prometheus/console_libraries
      - --web.console.templates=/usr/share/prometheus/consoles
      - --web.listen-address=0.0.0.0:9090
      - --storage.tsdb.retention=90d
    networks:
      - our_net

  grafana:
    image: docker.lomin.ai/ts-grafana:${TEXTSCOPE_VERSION}
    container_name: grafana
    build:
      context: ./
      dockerfile: grafana/Dockerfile
    environment:
      - PROMETHEUS_IP_ADDR=${PROMETHEUS_IP_ADDR}
      - PROMETHEUS_IP_PORT=${PROMETHEUS_IP_PORT}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./ldap/grafana.ini:/etc/grafana/grafana.ini
      - ./ldap/ldap.toml:/etc/grafana/ldap.toml
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
    depends_on:
      - prometheus
    restart: always
    networks:
      - our_net

  openldap:
    image: docker.lomin.ai/ts-openldap:${TEXTSCOPE_VERSION}
    container_name: ldap
    build: ./openldap
    environment:
      SLAPD_PASSWORD: lomin
      SLAPD_DOMAIN: lomin.ai
      SLAPD_ADDITIONAL_MODULES: memberof
    ports:
      - "389:389"
    networks:
      - our_net

volumes:
  prometheus_data: {}
  postgres_data: {}
  grafana_data: {}
  esdata: {}
  minio_data: {}
  # mysql_data:
  #   driver: local
  #   driver_opts:
  #     o: bind
  #     type: none
  #     device: /docker/data/mysql_data

networks:
  our_net:
    name: our_net
    ipam:
      config:
        - subnet: 10.254.0.0/16
