version: '2.3'

services:
  postgres:
    container_name: postgres
    image: postgres:14 #TODO make Dockerfile
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DATABASE}
    ports:
      - "55432:5432"
    networks:
      our_net:
        ipv4_address: ${POSTGRES_IP_ADDR}

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4 #TODO make Dockerfile  
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
    ports:
      - "5050:80"
    networks:
      our_net:
        ipv4_address: ${PGADMIN_IP_ADDR}
  
  serving:
    image: docker.lomin.ai/ts-gpu-serving:${TEXTSCOPE_SERVING_VERSION}
    container_name: serving
    environment:
      - CUSTOMER=${CUSTOMER}
    volumes:
      - ${MOUNT_LOG_PATH}:/workspace/logs
    restart: unless-stopped
    extra_hosts:
      - ${LDAP_HOST}
    cap_add:
      - SYS_PTRACE
    networks:
      our_net:
        ipv4_address: ${SERVING_IP_ADDR}

  web:
    image: docker.lomin.ai/ts-web:${TEXTSCOPE_CORE_VERSION}
    container_name: web
    environment:
      - CUSTOMER=${CUSTOMER}
    volumes:
      - ${MOUNT_LOG_PATH}:/workspace/logs
    restart: unless-stopped
    depends_on: 
      - postgres
    cap_add:
      - SYS_PTRACE
    networks:
      our_net:
          ipv4_address: ${WEB_IP_ADDR}

  pp:
    image: docker.lomin.ai/ts-pp:${TEXTSCOPE_PP_VERSION}
    container_name: pp
    environment:
      - CUSTOMER=${CUSTOMER}
    volumes:
      - ${MOUNT_LOG_PATH}:/workspace/logs
    restart: unless-stopped
    cap_add:
      - SYS_PTRACE
    networks:
      our_net:
          ipv4_address: ${PP_IP_ADDR}

  wrapper:
    image: docker.lomin.ai/ts-wrapper:${TEXTSCOPE_WRAPPER_VERSION}
    container_name: wrapper
    environment:
      - CUSTOMER=${CUSTOMER}
    volumes:
      - ${MOUNT_LOG_PATH}:/workspace/logs
    restart: unless-stopped
    extra_hosts:
      - ${DATABASE_HOST}
    # depends_on: 
    #   - mysql1
    networks:
      our_net:
          ipv4_address: ${WRAPPER_IP_ADDR}
   
  nginx:
    image: docker.lomin.ai/ts-nginx:${TEXTSCOPE_NGINX_VERSION}
    build:
      context: ./
      dockerfile: docker/production/Dockerfile.nginx
      args:
        CONF_NAME: nginx
        MAINTAINER: ${MAINTAINER}
    container_name: nginx
    volumes:
      - ./proxy/nginx.conf:/etc/nginx/nginx.conf
      - ${MOUNT_LOG_PATH}/nginx:/var/log/nginx
    restart: unless-stopped
    networks:
      our_net:
        ipv4_address: ${NGINX_IP_ADDR}

  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:0.9.0
    container_name: nginx_exporter
    command:
      - -nginx.scrape-uri=http://${NGINX_IP_ADDR}:8080/metrics
    networks:
      our_net:
        ipv4_address: ${NGINX_EXPORTER_IP_ADDR}

  gpu_telemetry:
    image: nvcr.io/nvidia/k8s/dcgm-exporter:2.0.13-2.1.2-ubuntu18.04
    container_name: gpu_telemetry
    runtime: nvidia
    networks:
      our_net:
        ipv4_address: ${DCGM_EXPORTER_IP_ADDR}
    
  hardware_telemetry:
    image: prom/node-exporter:v1.2.2
    container_name: hardware_telemetry
    networks:
      our_net:
        ipv4_address: ${NODE_EXPORTER_IP_ADDR}
    entrypoint: /bin/node_exporter
    
  prometheus:
    image: prom/prometheus:v2.30.0
    container_name: prometheus
    restart: always
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./.env:/etc/prometheus/.env
      - prometheus_data:/prometheus
    entrypoint: /bin/prometheus
    command: 
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --web.console.libraries=/usr/share/prometheus/console_libraries
      - --web.console.templates=/usr/share/prometheus/consoles
    networks:
      our_net:
          ipv4_address: ${PROMETHEUS_IP_ADDR}

  grafana:
    image: grafana/grafana:8.1.4-ubuntu
    container_name: grafana
    volumes: 
      - grafana_data:/var/lib/grafana
      - ./ldap/grafana.ini:/etc/grafana/grafana.ini
      - ./ldap/ldap.toml:/etc/grafana/ldap.toml
    depends_on: 
      - prometheus
    restart: always
    networks:
      our_net:
          ipv4_address: ${GRAFANA_IP_ADDR}

  openldap:
    image: docker.lomin.ai/ts-openldap:${TEXTSCOPE_VERSION}
    container_name: ldap
    build: ./openldap
    environment:
      SLAPD_PASSWORD: lomin
      SLAPD_DOMAIN: lomin.ai
      SLAPD_ADDITIONAL_MODULES: memberof
    ports:
      - "389:389"
    networks:
      our_net:
          ipv4_address: ${OPENLDAP_IP_ADDR}


volumes: 
  prometheus_data: {}
  grafana_data: {}
  mysql_data: {}

networks:
  our_net:
    ipam:
      config:
        - subnet: 10.254.0.0/16
