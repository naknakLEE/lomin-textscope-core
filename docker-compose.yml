version: '2.3'

services:
  elasticsearch:
    image: docker.io/ts-elasticsearch:${ELASTICSEARCH_IMAGE_VERSION:-0.0.0}
    build:
      context: elasticsearch
      dockerfile: Dockerfile.elasticsearch
    container_name: elasticsearch
    restart: on-failure
    volumes:
      - esdata:/usr/share/elasticsearch/data:rw
    ports:
      - 9200:9200
      - 9300:9300
    environment:
      - cluster.name=ts-cluster
      - discovery.type=single-node
      - http.host=0.0.0.0
      - transport.host=127.0.0.1
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    networks:
      - our_net

  kibana:
    image: docker.elastic.co/kibana/kibana:7.16.2
    container_name: kibana
    ports:
      - 5601:5601
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - our_net
  pg-cleaner-d:
    image: pg-cleaner-d
    container_name: pg-cleaner-d
    restart: on-failure
    environment:
      - TZ=Asia/Seoul
    build:
      context: ./cleaner
      dockerfile: dockerfile
    volumes:
      - ./cleaner/entrypoint.sh:/usr/sbin/entrypoint.sh
      - ./cleaner/cron/root:/etc/cron.d/root
      - ./cleaner/files/:/root/files/
    networks:
      - our_net
      - ha_net
  pg_node-9:
    image: docker.io/bitnami/postgresql-repmgr:11
    container_name: pg_node-9
    hostname: pg_node-9
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - TZ=Asia/Seoul
      - POSTGRESQL_POSTGRES_PASSWORD=postgres
      - POSTGRESQL_USERNAME=${POSTGRES_USER}
      - POSTGRESQL_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRESQL_DATABASE=${POSTGRES_DATABASE}
      - REPMGR_PASSWORD=repmgr
      - REPMGR_PRIMARY_HOST=pg_node-9
      - REPMGR_PARTNER_NODES=pg_node-9,pg_node-8
      - REPMGR_NODE_NAME=pg_node-9
      - REPMGR_NODE_NETWORK_NAME=pg_node-9
    extra_hosts:
      - "pg_node-8:192.168.0.8"
    networks:
      our_net:
        ipv4_address: ${POSTGRES_NODE_IP_ADDR}
  master_pgpool:
    image: docker.io/bitnami/pgpool:4
    container_name: master_pgpool
    hostname: master_pgpool
    restart: unless-stopped
    ports:
      - "${PGPOOL_IP_PORT}:5432"
    extra_hosts:
      - "pg_node-8:192.168.0.8"
    environment:
      - TZ=Asia/Seoul
      - PGPOOL_BACKEND_NODES=0:pg_node-9:5432,1:pg_node-8:5432
      - PGPOOL_SR_CHECK_USER=${PGPOOL_SR_CHECK_USER}
      - PGPOOL_SR_CHECK_PASSWORD=${PGPOOL_SR_CHECK_PASSWORD}
      - PGPOOL_ENABLE_LDAP=no
      - PGPOOL_POSTGRES_USERNAME=${POSTGRES_USER}
      - PGPOOL_POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGPOOL_ADMIN_USERNAME=${PGPOOL_ADMIN_USERNAME}
      - PGPOOL_ADMIN_PASSWORD=${PGPOOL_ADMIN_PASSWORD}
      - PGPOOL_ENABLE_LOAD_BALANCING=yes
      - PGPOOL_AUTO_FAILBACK=yes
      - PGPOOL_BACKEND_APPLICATION_NAMES=0:pg_node-9:5432,1:pg_node-8:5432
    depends_on:
      - pg_node-9
    networks:
      our_net:
        ipv4_address: ${POSTGRES_IP_ADDR}
    healthcheck:
      test: ["CMD", "/opt/bitnami/scripts/pgpool/healthcheck.sh"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4 #TODO make Dockerfile  
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
      TZ: Asia/Seoul
    depends_on:
      - master_pgpool
    ports:
      - "5050:80"
    networks:
      our_net:
        ipv4_address: ${PGADMIN_IP_ADDR}
  
  serving:
    image: docker.lomin.ai/ts-gpu-serving:${TEXTSCOPE_SERVING_VERSION}
    container_name: serving
    environment:
      - CUSTOMER=${CUSTOMER}
      - TZ=Asia/Seoul
    volumes:
      - ${MOUNT_LOG_PATH}:/workspace/logs
      - /home/mir/Downloads/hklife:/DATA_SHARE/hklife
      - /home/mir/Downloads/hg_life/life_insurance/life_insurance_test_set:/DATA_SHARE/life_insurance_test_set
    restart: unless-stopped
    extra_hosts:
      - ${LDAP_HOST}
    cap_add:
      - SYS_PTRACE
    networks:
      our_net:
        ipv4_address: ${SERVING_IP_ADDR}

  # serving_replica:
  #   image: docker.lomin.ai/ts-gpu-serving:${TEXTSCOPE_SERVING_VERSION}
  #   container_name: serving_replica
  #   environment:
  #     - CUSTOMER=${CUSTOMER}
  #   restart: unless-stopped
  #   cap_add:
  #     - SYS_PTRACE
  #   networks:
  #     our_net:
  #       ipv4_address: ${SERVING_REPLICA_IP_ADDR}

  web:
    image: docker.lomin.ai/ts-web:${TEXTSCOPE_CORE_VERSION}
    container_name: web
    environment:
      - CUSTOMER=${CUSTOMER}
      - TZ=Asia/Seoul
    volumes:
      - ${MOUNT_LOG_PATH}:/workspace/logs
    restart: unless-stopped
    depends_on: 
      - master_pgpool
    cap_add:
      - SYS_PTRACE
    networks:
      our_net:
          ipv4_address: ${WEB_IP_ADDR}

  pp:
    image: docker.lomin.ai/ts-pp:${TEXTSCOPE_PP_VERSION}
    container_name: pp
    environment:
      - CUSTOMER=${CUSTOMER}
      - TZ=Asia/Seoul
    volumes:
      - ${MOUNT_LOG_PATH}:/workspace/logs
    restart: unless-stopped
    cap_add:
      - SYS_PTRACE
    networks:
      our_net:
          ipv4_address: ${PP_IP_ADDR}

  wrapper:
    image: docker.lomin.ai/ts-wrapper:${TEXTSCOPE_WRAPPER_VERSION}
    container_name: wrapper
    environment:
      - CUSTOMER=${CUSTOMER}
      - TZ=Asia/Seoul
    volumes:
      - ${MOUNT_LOG_PATH}:/workspace/logs
      - /home/mir/Downloads/hklife:/DATA_SHARE/hklife
      - /home/mir/Downloads/hg_life/life_insurance/life_insurance_test_set:/DATA_SHARE/life_insurance_test_set
    restart: unless-stopped
    extra_hosts:
      - ${DATABASE_HOST}
    depends_on: 
      - master_pgpool
    networks:
      our_net:
          ipv4_address: ${WRAPPER_IP_ADDR}
    
  # multiple_gpu_load_balancing:
  #   image: nginx:1.21.1
  #   container_name: multiple_gpu_load_balancing
  #   restart: unless-stopped
  #   volumes:
  #     - ./proxy/multiple_gpu_load_balancing.conf:/etc/nginx/nginx.conf
  #   networks:
  #     our_net:
  #       ipv4_address: ${MULTIPLE_GPU_LOAD_BALANCING_NGINX_IP_ADDR}
   
  # nginx:
  #   image: docker.lomin.ai/ts-nginx:${TEXTSCOPE_NGINX_VERSION}
  #   build:
  #     context: ./
  #     dockerfile: docker/production/Dockerfile.nginx
  #     args:
  #       CONF_NAME: nginx
  #       MAINTAINER: ${MAINTAINER}
  #   container_name: nginx
  #   volumes:
  #     - ./proxy/nginx.conf:/etc/nginx/nginx.conf
  #     - ${MOUNT_LOG_PATH}/nginx:/var/log/nginx
  #   restart: unless-stopped
  #   networks:
  #     our_net:
  #       ipv4_address: ${NGINX_IP_ADDR}

  # nginx-exporter:
  #   image: nginx/nginx-prometheus-exporter:0.9.0
  #   container_name: nginx_exporter
  #   command:
  #     - -nginx.scrape-uri=http://${NGINX_IP_ADDR}:8080/metrics
  #   networks:
  #     our_net:
  #       ipv4_address: ${NGINX_EXPORTER_IP_ADDR}

  gpu_telemetry:
    image: nvcr.io/nvidia/k8s/dcgm-exporter:2.0.13-2.1.2-ubuntu18.04
    container_name: gpu_telemetry
    runtime: nvidia
    networks:
      our_net:
        ipv4_address: ${DCGM_EXPORTER_IP_ADDR}
    
  hardware_telemetry:
    image: prom/node-exporter:v1.2.2
    container_name: hardware_telemetry
    networks:
      our_net:
        ipv4_address: ${NODE_EXPORTER_IP_ADDR}
    entrypoint: /bin/node_exporter
    
  prometheus:
    image: prom/prometheus:v2.30.0
    container_name: prometheus
    restart: always
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./.env:/etc/prometheus/.env
      - prometheus_data:/prometheus
    entrypoint: /bin/prometheus
    command: 
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --web.console.libraries=/usr/share/prometheus/console_libraries
      - --web.console.templates=/usr/share/prometheus/consoles
      - --web.listen-address=0.0.0.0:9090
      - --storage.tsdb.retention=90d
    networks:
      our_net:
          ipv4_address: ${PROMETHEUS_IP_ADDR}

  # mysql-exporter:
  #   image: prom/mysqld-exporter:v0.13.0
  #   container_name: mysqld-exporter
  #   restart: always
  #   entrypoint: /bin/mysqld_exporter
  #   environment:
  #     - DATA_SOURCE_NAME=${MYSQL_USER}:${MYSQL_PASSWORD}@(${MYSQL_IP_ADDR}:3306)/
  #   cap_add:
  #     - SYS_NICE
  #   networks:
  #     our_net:
  #       ipv4_address: ${MYSQL_EXPORTER_IP_ADDR}

  grafana:
    image: grafana/grafana:8.1.4-ubuntu
    container_name: grafana
    environment:
      - PROMETHEUS_IP_ADDR=${PROMETHEUS_IP_ADDR}
      - PROMETHEUS_IP_PORT=${PROMETHEUS_IP_PORT}
    volumes: 
      - grafana_data:/var/lib/grafana
      - ./ldap/grafana.ini:/etc/grafana/grafana.ini
      - ./ldap/ldap.toml:/etc/grafana/ldap.toml
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
    depends_on: 
      - prometheus
    restart: always
    networks:
      our_net:
          ipv4_address: ${GRAFANA_IP_ADDR}

  # openldap:
  #   image: docker.lomin.ai/ts-openldap:${TEXTSCOPE_VERSION}
  #   container_name: ldap
  #   build: ./openldap
  #   environment:
  #     SLAPD_PASSWORD: lomin
  #     SLAPD_DOMAIN: lomin.ai
  #     SLAPD_ADDITIONAL_MODULES: memberof
  #   ports:
  #     - "389:389"
  #   networks:
  #     our_net:
  #         ipv4_address: ${OPENLDAP_IP_ADDR}


volumes: 
  prometheus_data: {}
  postgres_data: {}
  grafana_data: {}
  # mysql_data:
  #   driver: local
  #   driver_opts:
  #     o: bind
  #     type: none
  #     device: /docker/data/mysql_data


networks:
  our_net:
    ipam:
      config:
        - subnet: 10.254.0.0/16
  ha_net:
    external: true