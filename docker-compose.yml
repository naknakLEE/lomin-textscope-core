version: '2.3'

services:

  mysql:
    image: mysql:8.0.25
    container_name: mysql
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_PASSWORD}
      - TZ=Asia/Seoul
    ports: 
      - 3307:3306
    volumes:
      - mysqldata:/var/lib/mysql
    networks:
      our_net:
          ipv4_address: ${MYSQL_IP_ADDR}
    restart: always
  
  serving:
    image: docker.lomin.ai/ts-gpu-serving:0.0.1
    build:
      context: ./docker/development
      dockerfile: Dockerfile.gpu_serving
    container_name: serving
    ports: 
      - 5000:5000
    volumes:
      - ./:/workspace
    runtime: nvidia
    #   - ./app/utils/bentoml_configuration.yml:/user/home/bentoml/bentoml.yml
    tty: true
    depends_on: 
      - mysql
    runtime: nvidia
    networks:
      our_net:
        ipv4_address: ${SERVING_IP_ADDR}
    # command: bentoml serve MultiModelService:latest

  web:
    image: docker.lomin.ai/ts-web:0.0.1
    build:
      context: ./docker/development
      dockerfile: Dockerfile.fastapi
    container_name: web
    ports: 
      - 8000:8000
    volumes:
      - ./:/workspace
    tty: true
    depends_on: 
      - mysql
    networks:
      our_net:
          ipv4_address: ${WEB_IP_ADDR}
    restart: unless-stopped
    # command: python /workspace/main.bin

  pp:
    image: docker.lomin.ai/ts-pp:0.0.1
    build:
      context: ./docker/development
      dockerfile: Dockerfile.pp
    container_name: pp
    ports: 
      - 8080:8080
    volumes:
      - ./:/workspace
    tty: true
    depends_on: 
      - mysql
    networks:
      our_net:
          ipv4_address: ${PP_IP_ADDR}
    restart: unless-stopped
    # command: python /workspace/main.bin

  proxy:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./proxy/nginx.conf:/etc/nginx/nginx.conf
    networks:
      our_net:
        ipv4_address: ${NGINX_IP_ADDR}

  # gpu_telemetry:
  #   image: nvcr.io/nvidia/k8s/dcgm-exporter:2.0.13-2.1.2-ubuntu18.04
  #   container_name: gpu_telemetry
  #   ports:
  #     - 9400:9400
  #   runtime: nvidia
  #   networks:
  #     our_net:
  #       ipv4_address: ${DCGM_EXPORTER_IP_ADDR}

  # redis:
  #   image: redis
  #   container_name: redis${REDIS_IP_PORT}
  #   command: redis-server --port ${REDIS_IP_PORT}
  #   hostname: redis${REDIS_IP_PORT}
  #   labels:
  #     - "name=redis"
  #     - "mode=standalone"
  #   ports:
  #     - ${REDIS_IP_PORT}:${REDIS_IP_PORT}
  #   networks:
  #     our_net:
  #       ipv4_address: ${REDIS_IP_ADDR}
    
  hardware_telemetry:
    image: prom/node-exporter
    container_name: hardware_telemetry
    ports:
      - 9100:9100
    networks:
      our_net:
        ipv4_address: ${NODE_EXPORTER_IP_ADDR}

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    depends_on: 
      - web
      # - serving
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - 9090:9090
    networks:
      our_net:
          ipv4_address: ${PROMETHEUS_IP_ADDR}
    restart: always
    
  grafana:
    image: grafana/grafana
    container_name: grafana
    depends_on: 
      - prometheus
    volumes: 
      - grafana_data:/var/lib/grafana
    ports:
      - 3000:3000
    networks:
      our_net:
          ipv4_address: ${GRAFANA_IP_ADDR}
    restart: always

  # postgres-exporter:
  #   image: quay.io/prometheuscommunity/postgres-exporter
  #   container_name: postgres-exporter
  #   ports:
  #     - 9187:9187
  #   environment:
  #     - DATA_SOURCE_NAME=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_IP_ADDR}/${POSTGRES_DB}?sslmode=disable
  #   networks:
  #     our_net:
  #       ipv4_address: ${POSTGRES_EXPORTER_IP_ADDER}
  #   restart: always

  mysql-exporter:
    image: prom/mysqld-exporter
    container_name: mysqld-exporter
    ports:
      - 9104:9104
    environment:
      - DATA_SOURCE_NAME=${MYSQL_ROOT_USER}:${MYSQL_PASSWORD}@(${MYSQL_IP_ADDR}:3306)/
    cap_add:
      - SYS_NICE
    networks:
      our_net:
        ipv4_address: ${MYSQL_EXPORTER_IP_ADDR}
    restart: always

  # pgadmin:
  #   image: dpage/pgadmin4
  #   container_name: pgadmin
  #   environment:
  #     PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
  #     PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
  #     PGADMIN_CONFIG_SERVER_MODE: 'False'
  #   volumes:
  #       - pgadmin:/root/.pgadmin
  #   ports:
  #     - "${PGADMIN_PORT:-5050}:80"
  #   networks:
  #     our_net:
  #         ipv4_address: ${PGADMIN_IP_ADDR}
  #   restart: unless-stopped

volumes: 
  prometheus_data: {}
  grafana_data: {}
  pgdata: {}
  mysqldata: {}
  # pgadmin: {}

networks:
  our_net:
    ipam:
      config:
        - subnet: 182.20.0.0/24
