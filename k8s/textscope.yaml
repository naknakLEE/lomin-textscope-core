apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-data-pvc
  labels:
    app: postgres
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: standard
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: postgres
  name: postgres
  namespace: textscope
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:14
        ports:
        - containerPort: 5432
          protocol: TCP
        envFrom:
          - configMapRef:
              name: env-config-postgres
        volumeMounts:
          - mountPath: /var/lib/postgresql/data
            name: postgres-pv
      volumes:
        - name: postgres-pv
          persistentVolumeClaim:
            claimName: postgres-data-pvc
  selector:
    matchLabels:
      app: postgres
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: textscope
  labels:
    app: postgres
spec:
  selector:
    app: postgres
  ports:
    - name: https
      protocol: TCP
      port: 5432
      targetPort: 5432
  type: LoadBalancer
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: elasticsearch-data-pvc
  labels:
    app: elasticsearch
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: standard
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: elasticsearch
  name: elasticsearch
  namespace: textscope
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: elasticsearch
    spec:
      containers:
      - name: elasticsearch
        image: docker.lomin.ai/ts-elasticsearch:0.0.0
        imagePullPolicy: IfNotPresent
        workingDir: /workspace/pp_server/pp_server/app
        ports:
        - containerPort: 9200
          protocol: TCP
        - containerPort: 9300
          protocol: TCP
        envFrom:
          - configMapRef:
              name: env-config-elasticsearch
        volumeMounts:
          - mountPath: /usr/share/elasticsearch/data
            name: elasticsearch-pv
      volumes:
        - name: elasticsearch-pv
          persistentVolumeClaim:
            claimName: elasticsearch-data-pvc
  selector:
    matchLabels:
      app: elasticsearch
---
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch
  namespace: textscope
  labels:
    app: elasticsearch
spec:
  selector:
    app: elasticsearch
  ports:
    - protocol: TCP
      port: 9200
      targetPort: 9200
      name: http
  type: LoadBalancer
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: openldap-data-pvc
  labels:
    app: openldap
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: standard
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: openldap
  name: openldap
  namespace: textscope
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: openldap
    spec:
      containers:
      - name: openldap
        image: docker.lomin.ai/ts-openldap:0.1.12
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 389
          protocol: TCP
        envFrom:
          - configMapRef:
              name: env-config-ldap
        volumeMounts:
          - mountPath: /var/lib/ldap
            name: openldap-pv
      volumes:
        - name: openldap-pv
          persistentVolumeClaim:
            claimName: openldap-data-pvc
  selector:
    matchLabels:
      app: openldap
---
apiVersion: v1
kind: Service
metadata:
  name: openldap
  namespace: textscope
  labels:
    app: openldap
spec:
  selector:
    app: openldap
  ports:
    - protocol: TCP
      port: 389
      targetPort: 389
      name: http
  type: LoadBalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: web
  name: web
  namespace: textscope
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: web
    spec:
      containers:
      - name: web
        image: docker.lomin.ai/ts-web-base:0.1.5 
        workingDir: /workspace/app
        imagePullPolicy: IfNotPresent
        command: ['python3', 'main.py']
        ports:
        - containerPort: 8000
          protocol: TCP
        volumeMounts:
        - mountPath: /workspace
          name: web-volume
      volumes:
      - name: web-volume
        hostPath:
          path: /home/shinuk/Documents/gallery/Textscope
          type: Directory
  selector:
    matchLabels:
      app: web
---
apiVersion: v1
kind: Service
metadata:
  name: web
  namespace: textscope
  labels:
    app: web
spec:
  selector:
    app: web
  ports:
    - protocol: TCP
      port: 8000
      targetPort: 8000
      name: http
  type: LoadBalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: pp
  name: pp
  namespace: textscope
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: pp
    spec:
      containers:
      - name: pp
        image: docker.lomin.ai/ts-pp-base:0.1.5
        workingDir: /workspace/pp_server/pp_server/app
        imagePullPolicy: IfNotPresent
        command: ['python3', 'main.py']
        ports:
        - containerPort: 8080
          protocol: TCP
        volumeMounts:
        - mountPath: /workspace
          name: pp-volume
      volumes:
      - name: pp-volume
        hostPath:
          path: /home/shinuk/Documents/gallery/Textscope
          type: Directory
  selector:
    matchLabels:
      app: pp
---
apiVersion: v1
kind: Service
metadata:
  name: pp
  namespace: textscope
  labels:
    app: pp
spec:
  selector:
    app: pp
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
      name: http
  type: LoadBalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: serving
  name: serving
  namespace: textscope
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: serving
    spec:
      containers:
      - name: serving
        image: docker.lomin.ai/ts-gpu-serving-base:0.1.5
        workingDir: /workspace/inference_server
        imagePullPolicy: IfNotPresent
        command: ['sh', 'assets/run-dev.sh']
        envFrom:
          - configMapRef:
              name: env-config-serving
        ports:
        - containerPort: 5000
          protocol: TCP
        volumeMounts:
        - mountPath: /workspace
          name: serving-volume
      volumes:
      - name: serving-volume
        hostPath:
          path: /home/shinuk/Documents/gallery/Textscope
          type: Directory
  selector:
    matchLabels:
      app: serving
---
apiVersion: v1
kind: Service
metadata:
  name: serving
  namespace: textscope
  labels:
    app: serving
spec:
  selector:
    app: serving
  ports:
    - protocol: TCP
      port: 5000
      targetPort: 5000
      name: http
  type: LoadBalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: wrapper
  name: wrapper
  namespace: textscope
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: wrapper
    spec:
      containers:
      - name: wrapper
        image: docker.lomin.ai/ts-wrapper-base:0.1.5
        workingDir: /workspace/textscope_wrapper/textscope_wrapper
        imagePullPolicy: IfNotPresent
        command: ['python3', 'main.py']
        ports:
        - containerPort: 8090
          protocol: TCP
        volumeMounts:
        - mountPath: /workspace
          name: wrapper-volume
      volumes:
      - name: wrapper-volume
        hostPath:
          path: /home/shinuk/Documents/gallery/Textscope
          type: Directory
  selector:
    matchLabels:
      app: wrapper
---
apiVersion: v1
kind: Service
metadata:
  name: wrapper
  namespace: textscope
  labels:
    app: wrapper
spec:
  selector:
    app: wrapper
  ports:
    - name: http
      targetPort: 8090  # port the container accepts traffic on
      port: 8090  # port other pods use to access the Service
      protocol: TCP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: wrapper-ingress
  namespace: textscope
  annotations:
    nginx.ingress.kubernetes.io/ssl-passthrough: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
  labels:
    app: wrapper
spec:
  tls:
    - hosts:
      - localhost
      secretName: tls-secret
  defaultBackend:
    service:
      name: wrapper
      port:
        number: 8090
  rules:
    - host: localhost
      http:
        paths:
          - path: "/"
            pathType: Prefix
            backend:
              service:
                name: wrapper
                port:
                  number: 8090
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: env-config-serving
  namespace: serving
data:  # Example vars that will get picked up by Flask application
  NVIDIA_VISIBLE_DEVICES: all
  BENTOML_CONFIG: /workspace/inference_server/assets/bentoml_configuration.yml
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: env-config-elasticsearch
  namespace: elasticsearch
data:  # Example vars that will get picked up by Flask application
  cluster.name: ts-cluster
  discovery.type: single-node
  http.host: 0.0.0.0
  transport.host: 127.0.0.1
  ES_JAVA_OPTS: -Xms512m -Xmx512m
  xpack.security.enabled: "false"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: env-config-postgres
  namespace: postgres
data:  # Example vars that will get picked up by Flask application
  POSTGRES_USER: lomin
  POSTGRES_PASSWORD: 1q2w3e4r
  POSTGRES_DB: textscope
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: env-config-ldap
  namespace: ldap
data:  # Example vars that will get picked up by Flask application
  SLAPD_PASSWORD: lomin
  SLAPD_DOMAIN: lomin.ai
  SLAPD_ADDITIONAL_MODULES: memberof
