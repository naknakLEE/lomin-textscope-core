server {
    listen       8080;
    server_name  localhost;
    ignore_invalid_headers off;
    client_max_body_size 0;
    proxy_buffering off;

    # # 대시보드 프론트
    location /dashboard {
        rewrite  ^/dashboard/(.*) /$1 break;
        proxy_pass http://textscope-plugin-webview:8090;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header x-forwarded-for $remote_addr;
        # add_header Cache-Control "public";
        # expires 1d;
        access_log true;

        # sub_filter (?<!dashboard)/assets/ /dashboard/assets/;
        sub_filter /assets/ /dashboard/assets/;

        sub_filter_once off;
        sub_filter_types *;
    }

    # # tocr-center 프론트
    location /tocr {
        rewrite  ^/tocr/(.*) /$1 break;
        proxy_pass http://textscope-plugin-webview-tocr:8090;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header x-forwarded-for $remote_addr;
        proxy_set_header Accept-Encoding "";
        # add_header Cache-Control "public";
        # expires 1d;
        access_log true;

        sub_filter /assets/ /tocr/assets/;

        sub_filter_once off;
        sub_filter_types *;

    }

    location /grafana {
        rewrite  ^/grafana/(.*) /$1 break;
        proxy_pass http://textscope-grafana:3000;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header x-forwarded-for $remote_addr;
        add_header Cache-Control "public";
        expires 1d;
        access_log true;
    }

    # location /pgadmin {
    #     proxy_set_header X-Script-Name /pgadmin;
    #     proxy_pass http://textscope-pgadmin:80;
    #     proxy_redirect off;
    #     proxy_set_header Host $host;
        
    # }

    location /minio {
        rewrite  ^/minio/(.*) /$1 break;
        proxy_pass http://textscope-minio:9001;
        proxy_http_version 1.1;

        proxy_set_header Host $host:8080;
        proxy_set_header x-forwarded-for $remote_addr;
        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Accept-Encoding "";
        proxy_set_header Connection "";
        proxy_connect_timeout 300;
        
        add_header Cache-Control "public";
        proxy_redirect off;
        expires 1d;
        access_log true;

        sub_filter static/ minio/static/;
        sub_filter styles/ minio/styles/;
        sub_filter /manifest.json /minio/manifest.json;
        sub_filter api/v1 minio/api/v1;
        
        sub_filter_once off;
        sub_filter_types *;

    }

    error_page  500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

}

server {
    listen       80;
    server_name  localhost;
    ignore_invalid_headers off;
    client_max_body_size 0;
    proxy_buffering off;

    location / {                                #0 http://0.0.0.0:80/wrapper/* 정규식에 맞는 url로 요청이 들어오면
        # rewrite  ^/wrapper/api/(.*) /$1 break;             #1-2 실제 접근하려는 url중 /wrapper를 지우고
        proxy_pass http://textscope-wrapper:8090;      #1-3 http://textscope-wrapper:8090으로 보낸다

        proxy_http_version 1.1;                        #2-1 권장 설정
        proxy_set_header Host $host;                   #2-2 권장 설정
        proxy_set_header x-forwarded-for $remote_addr; #2-3 nginx가 textscope-wrapper:8090에 요청을 하지만, 실제 누가 했는지(어디서 왔는지)를 ip 적어둠
        proxy_set_header Accept-Encoding "";          #2-4 gzip사용시 sub_filter 동장안함

        add_header Cache-Control "public";             #3-1 캐시 사용 가능 설정 (cache-control 옵션) -> 응답 헤더에 캐시 사용 가능 정보 추가
        expires 1d;                                    #3-2 캐시 만료 기간 설정 (cache-control 옵션) -> 웅답 헤더에 캐시 만료 날짜 정보 추가 (day=d, month=M, year=y)
        access_log true;                               #4 로그 남김

        # sub_filter /static/ /wrapper/api/static/;
        # sub_filter /openapi.json /wrapper/api/openapi.json;

        # sub_filter_once off;
        # sub_filter_types *;
    }

    location /dashboard {                                #0 http://0.0.0.0:80/wrapper/* 정규식에 맞는 url로 요청이 들어오면
        rewrite  ^/dashboard/(.*) /$1 break;             #1-2 실제 접근하려는 url중 /wrapper를 지우고
        proxy_pass http://textscope-plugin-dashboard:8100;      #1-3 http://textscope-wrapper:8090으로 보낸다

        proxy_http_version 1.1;                        #2-1 권장 설정
        proxy_set_header Host $host;                   #2-2 권장 설정
        proxy_set_header x-forwarded-for $remote_addr; #2-3 nginx가 textscope-wrapper:8090에 요청을 하지만, 실제 누가 했는지(어디서 왔는지)를 ip 적어둠
        proxy_set_header Accept-Encoding "";          #2-4 gzip사용시 sub_filter 동장안함

        # add_header Cache-Control "public";             #3-1 캐시 사용 가능 설정 (cache-control 옵션) -> 응답 헤더에 캐시 사용 가능 정보 추가
        # expires 1d;                                    #3-2 캐시 만료 기간 설정 (cache-control 옵션) -> 웅답 헤더에 캐시 만료 날짜 정보 추가 (day=d, month=M, year=y)
        access_log true;                               #4 로그 남김

        sub_filter static/ dashboard/static/;
        sub_filter openapi.json dashboard/openapi.json;

        sub_filter_once off;
        sub_filter_types *;
    }

    location /tocr {                                #0 http://0.0.0.0:80/wrapper/* 정규식에 맞는 url로 요청이 들어오면
        rewrite  ^/tocr/(.*) /$1 break;             #1-2 실제 접근하려는 url중 /wrapper를 지우고
        proxy_pass http://textscope-tocr:10080;      #1-3 http://textscope-wrapper:8090으로 보낸다

        proxy_http_version 1.1;                        #2-1 권장 설정
        proxy_set_header Host $host;                   #2-2 권장 설정
        proxy_set_header x-forwarded-for $remote_addr; #2-3 nginx가 textscope-wrapper:8090에 요청을 하지만, 실제 누가 했는지(어디서 왔는지)를 ip 적어둠
        proxy_set_header Accept-Encoding "";          #2-4 gzip사용시 sub_filter 동장안함

        add_header Cache-Control "public";             #3-1 캐시 사용 가능 설정 (cache-control 옵션) -> 응답 헤더에 캐시 사용 가능 정보 추가
        expires 1d;                                    #3-2 캐시 만료 기간 설정 (cache-control 옵션) -> 웅답 헤더에 캐시 만료 날짜 정보 추가 (day=d, month=M, year=y)
        access_log true;                               #4 로그 남김

        sub_filter static/ tocr/static/;
        sub_filter openapi.json tocr/openapi.json;

        sub_filter_once off;
        sub_filter_types *;
    }


    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }
}