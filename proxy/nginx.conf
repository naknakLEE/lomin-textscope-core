user nginx;
worker_processes  8;
pid        /var/run/nginx.pid;
events {
    worker_connections  1024;
}
http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    upstream wrapper {
        server 10.254.0.22:8090;
    }
    log_format  main  escape=json '{'
                                    '"$remote_addr" - "$remote_user [$time_local]",'
                                    '"status":"$status",'
                                    '"http_user_agent":"$http_user_agent",'
                                    '"args":"$args",'
                                    '"request_body":"$request_body",'
                                    '"host":"$host",'
                                    '"request":"$request",'
                                    '"resp_body":"$resp_body",'
                                    '"req_header":"$req_header",'
                                    '"resp_header":"$resp_header",'
                                '}';
    server {
        access_log  /var/log/nginx/access.log main;
        error_log  /var/log/nginx/error.log warn;

        lua_need_request_body on;

        set $resp_body "";
        body_filter_by_lua '
            local resp_body = string.sub(ngx.arg[1], 1, 1000)
            ngx.ctx.buffered = (ngx.ctx.buffered or "") .. resp_body
            local regex = "\\"stat.*us\\":%d%d%d%d\\","
            local m = string.match(ngx.ctx.buffered, regex)
            if ngx.arg[2] then
                ngx.var.resp_body = m
            end
        ';
        set $req_header "";
        set $resp_header "";
        header_filter_by_lua '
        local h = ngx.req.get_headers()
        for k, v in pairs(h) do
            ngx.var.req_header = ngx.var.req_header .. k.."="..v.." "
        end
        local rh = ngx.resp.get_headers()
        for k, v in pairs(rh) do
            ngx.var.resp_header = ngx.var.resp_header .. k.."="..v.." "
        end
        ';

        # image file is big
        client_max_body_size 1G;
        listen 80;
        server_name localhost;
        location / {
            proxy_pass         http://wrapper;
            proxy_redirect     off;
            proxy_set_header   Host $host;
            proxy_set_header   X-Real-IP $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;

            proxy_connect_timeout 1200;
            proxy_send_timeout 1200;
            proxy_read_timeout 1200;
            send_timeout 1200;
        }

    }

    server {
        listen 8080;
        location /metrics {
            stub_status on;
            access_log off;
            allow 10.254.0.23;
            deny all;
        }
    }

    sendfile        on;
    keepalive_timeout  65;
    include /etc/nginx/conf.d/*.conf;
}
